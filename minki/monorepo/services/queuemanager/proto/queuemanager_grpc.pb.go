// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: queuemanager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueueManagerServiceClient is the client API for QueueManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueManagerServiceClient interface {
	QueuePlayer(ctx context.Context, in *QueuePlayerRequest, opts ...grpc.CallOption) (*QueuePlayerResponse, error)
	DequeuePlayer(ctx context.Context, in *DequeuePlayerRequest, opts ...grpc.CallOption) (*DequeuePlayerResponse, error)
	IsQueued(ctx context.Context, in *IsQueuedRequest, opts ...grpc.CallOption) (*IsQueuedResponse, error)
	GetAllQueues(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllQueuesResponse, error)
}

type queueManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueManagerServiceClient(cc grpc.ClientConnInterface) QueueManagerServiceClient {
	return &queueManagerServiceClient{cc}
}

func (c *queueManagerServiceClient) QueuePlayer(ctx context.Context, in *QueuePlayerRequest, opts ...grpc.CallOption) (*QueuePlayerResponse, error) {
	out := new(QueuePlayerResponse)
	err := c.cc.Invoke(ctx, "/proto.QueueManagerService/QueuePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueManagerServiceClient) DequeuePlayer(ctx context.Context, in *DequeuePlayerRequest, opts ...grpc.CallOption) (*DequeuePlayerResponse, error) {
	out := new(DequeuePlayerResponse)
	err := c.cc.Invoke(ctx, "/proto.QueueManagerService/DequeuePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueManagerServiceClient) IsQueued(ctx context.Context, in *IsQueuedRequest, opts ...grpc.CallOption) (*IsQueuedResponse, error) {
	out := new(IsQueuedResponse)
	err := c.cc.Invoke(ctx, "/proto.QueueManagerService/IsQueued", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueManagerServiceClient) GetAllQueues(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllQueuesResponse, error) {
	out := new(GetAllQueuesResponse)
	err := c.cc.Invoke(ctx, "/proto.QueueManagerService/GetAllQueues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueManagerServiceServer is the server API for QueueManagerService service.
// All implementations must embed UnimplementedQueueManagerServiceServer
// for forward compatibility
type QueueManagerServiceServer interface {
	QueuePlayer(context.Context, *QueuePlayerRequest) (*QueuePlayerResponse, error)
	DequeuePlayer(context.Context, *DequeuePlayerRequest) (*DequeuePlayerResponse, error)
	IsQueued(context.Context, *IsQueuedRequest) (*IsQueuedResponse, error)
	GetAllQueues(context.Context, *Empty) (*GetAllQueuesResponse, error)
	mustEmbedUnimplementedQueueManagerServiceServer()
}

// UnimplementedQueueManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueueManagerServiceServer struct {
}

func (UnimplementedQueueManagerServiceServer) QueuePlayer(context.Context, *QueuePlayerRequest) (*QueuePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuePlayer not implemented")
}
func (UnimplementedQueueManagerServiceServer) DequeuePlayer(context.Context, *DequeuePlayerRequest) (*DequeuePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DequeuePlayer not implemented")
}
func (UnimplementedQueueManagerServiceServer) IsQueued(context.Context, *IsQueuedRequest) (*IsQueuedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsQueued not implemented")
}
func (UnimplementedQueueManagerServiceServer) GetAllQueues(context.Context, *Empty) (*GetAllQueuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllQueues not implemented")
}
func (UnimplementedQueueManagerServiceServer) mustEmbedUnimplementedQueueManagerServiceServer() {}

// UnsafeQueueManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueManagerServiceServer will
// result in compilation errors.
type UnsafeQueueManagerServiceServer interface {
	mustEmbedUnimplementedQueueManagerServiceServer()
}

func RegisterQueueManagerServiceServer(s grpc.ServiceRegistrar, srv QueueManagerServiceServer) {
	s.RegisterService(&QueueManagerService_ServiceDesc, srv)
}

func _QueueManagerService_QueuePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueManagerServiceServer).QueuePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QueueManagerService/QueuePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueManagerServiceServer).QueuePlayer(ctx, req.(*QueuePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueManagerService_DequeuePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeuePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueManagerServiceServer).DequeuePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QueueManagerService/DequeuePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueManagerServiceServer).DequeuePlayer(ctx, req.(*DequeuePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueManagerService_IsQueued_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsQueuedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueManagerServiceServer).IsQueued(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QueueManagerService/IsQueued",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueManagerServiceServer).IsQueued(ctx, req.(*IsQueuedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueManagerService_GetAllQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueManagerServiceServer).GetAllQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QueueManagerService/GetAllQueues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueManagerServiceServer).GetAllQueues(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueManagerService_ServiceDesc is the grpc.ServiceDesc for QueueManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.QueueManagerService",
	HandlerType: (*QueueManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueuePlayer",
			Handler:    _QueueManagerService_QueuePlayer_Handler,
		},
		{
			MethodName: "DequeuePlayer",
			Handler:    _QueueManagerService_DequeuePlayer_Handler,
		},
		{
			MethodName: "IsQueued",
			Handler:    _QueueManagerService_IsQueued_Handler,
		},
		{
			MethodName: "GetAllQueues",
			Handler:    _QueueManagerService_GetAllQueues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queuemanager.proto",
}
