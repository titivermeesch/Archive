// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: mappy.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MappyServiceClient is the client API for MappyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MappyServiceClient interface {
	GetMap(ctx context.Context, in *GetMapRequest, opts ...grpc.CallOption) (*GetMapResponse, error)
	GetRandomMap(ctx context.Context, in *GetRandomMapRequest, opts ...grpc.CallOption) (*GetRandomMapResponse, error)
	ListMaps(ctx context.Context, in *ListMapsRequest, opts ...grpc.CallOption) (*ListMapsResponse, error)
	UploadMap(ctx context.Context, in *UploadMapRequest, opts ...grpc.CallOption) (*UploadMapResponse, error)
}

type mappyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMappyServiceClient(cc grpc.ClientConnInterface) MappyServiceClient {
	return &mappyServiceClient{cc}
}

func (c *mappyServiceClient) GetMap(ctx context.Context, in *GetMapRequest, opts ...grpc.CallOption) (*GetMapResponse, error) {
	out := new(GetMapResponse)
	err := c.cc.Invoke(ctx, "/proto.MappyService/GetMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappyServiceClient) GetRandomMap(ctx context.Context, in *GetRandomMapRequest, opts ...grpc.CallOption) (*GetRandomMapResponse, error) {
	out := new(GetRandomMapResponse)
	err := c.cc.Invoke(ctx, "/proto.MappyService/GetRandomMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappyServiceClient) ListMaps(ctx context.Context, in *ListMapsRequest, opts ...grpc.CallOption) (*ListMapsResponse, error) {
	out := new(ListMapsResponse)
	err := c.cc.Invoke(ctx, "/proto.MappyService/ListMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappyServiceClient) UploadMap(ctx context.Context, in *UploadMapRequest, opts ...grpc.CallOption) (*UploadMapResponse, error) {
	out := new(UploadMapResponse)
	err := c.cc.Invoke(ctx, "/proto.MappyService/UploadMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MappyServiceServer is the server API for MappyService service.
// All implementations must embed UnimplementedMappyServiceServer
// for forward compatibility
type MappyServiceServer interface {
	GetMap(context.Context, *GetMapRequest) (*GetMapResponse, error)
	GetRandomMap(context.Context, *GetRandomMapRequest) (*GetRandomMapResponse, error)
	ListMaps(context.Context, *ListMapsRequest) (*ListMapsResponse, error)
	UploadMap(context.Context, *UploadMapRequest) (*UploadMapResponse, error)
	mustEmbedUnimplementedMappyServiceServer()
}

// UnimplementedMappyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMappyServiceServer struct {
}

func (UnimplementedMappyServiceServer) GetMap(context.Context, *GetMapRequest) (*GetMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMap not implemented")
}
func (UnimplementedMappyServiceServer) GetRandomMap(context.Context, *GetRandomMapRequest) (*GetRandomMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomMap not implemented")
}
func (UnimplementedMappyServiceServer) ListMaps(context.Context, *ListMapsRequest) (*ListMapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaps not implemented")
}
func (UnimplementedMappyServiceServer) UploadMap(context.Context, *UploadMapRequest) (*UploadMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMap not implemented")
}
func (UnimplementedMappyServiceServer) mustEmbedUnimplementedMappyServiceServer() {}

// UnsafeMappyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MappyServiceServer will
// result in compilation errors.
type UnsafeMappyServiceServer interface {
	mustEmbedUnimplementedMappyServiceServer()
}

func RegisterMappyServiceServer(s grpc.ServiceRegistrar, srv MappyServiceServer) {
	s.RegisterService(&MappyService_ServiceDesc, srv)
}

func _MappyService_GetMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappyServiceServer).GetMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MappyService/GetMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappyServiceServer).GetMap(ctx, req.(*GetMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappyService_GetRandomMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappyServiceServer).GetRandomMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MappyService/GetRandomMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappyServiceServer).GetRandomMap(ctx, req.(*GetRandomMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappyService_ListMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappyServiceServer).ListMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MappyService/ListMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappyServiceServer).ListMaps(ctx, req.(*ListMapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappyService_UploadMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappyServiceServer).UploadMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MappyService/UploadMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappyServiceServer).UploadMap(ctx, req.(*UploadMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MappyService_ServiceDesc is the grpc.ServiceDesc for MappyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MappyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MappyService",
	HandlerType: (*MappyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMap",
			Handler:    _MappyService_GetMap_Handler,
		},
		{
			MethodName: "GetRandomMap",
			Handler:    _MappyService_GetRandomMap_Handler,
		},
		{
			MethodName: "ListMaps",
			Handler:    _MappyService_ListMaps_Handler,
		},
		{
			MethodName: "UploadMap",
			Handler:    _MappyService_UploadMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mappy.proto",
}
