// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: playermanager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayerManagerServiceClient is the client API for PlayerManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerManagerServiceClient interface {
	GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*GetPlayerResponse, error)
	UpdatePlayer(ctx context.Context, in *UpdatePlayerRequest, opts ...grpc.CallOption) (*Empty, error)
	GetPlayerFriends(ctx context.Context, in *GetPlayerFriendsRequest, opts ...grpc.CallOption) (*GetPlayerFriendsResponse, error)
	AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*Empty, error)
}

type playerManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerManagerServiceClient(cc grpc.ClientConnInterface) PlayerManagerServiceClient {
	return &playerManagerServiceClient{cc}
}

func (c *playerManagerServiceClient) GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*GetPlayerResponse, error) {
	out := new(GetPlayerResponse)
	err := c.cc.Invoke(ctx, "/proto.PlayerManagerService/GetPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerManagerServiceClient) UpdatePlayer(ctx context.Context, in *UpdatePlayerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.PlayerManagerService/UpdatePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerManagerServiceClient) GetPlayerFriends(ctx context.Context, in *GetPlayerFriendsRequest, opts ...grpc.CallOption) (*GetPlayerFriendsResponse, error) {
	out := new(GetPlayerFriendsResponse)
	err := c.cc.Invoke(ctx, "/proto.PlayerManagerService/GetPlayerFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerManagerServiceClient) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.PlayerManagerService/AddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerManagerServiceServer is the server API for PlayerManagerService service.
// All implementations must embed UnimplementedPlayerManagerServiceServer
// for forward compatibility
type PlayerManagerServiceServer interface {
	GetPlayer(context.Context, *GetPlayerRequest) (*GetPlayerResponse, error)
	UpdatePlayer(context.Context, *UpdatePlayerRequest) (*Empty, error)
	GetPlayerFriends(context.Context, *GetPlayerFriendsRequest) (*GetPlayerFriendsResponse, error)
	AddFriend(context.Context, *AddFriendRequest) (*Empty, error)
	mustEmbedUnimplementedPlayerManagerServiceServer()
}

// UnimplementedPlayerManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerManagerServiceServer struct {
}

func (UnimplementedPlayerManagerServiceServer) GetPlayer(context.Context, *GetPlayerRequest) (*GetPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayer not implemented")
}
func (UnimplementedPlayerManagerServiceServer) UpdatePlayer(context.Context, *UpdatePlayerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayer not implemented")
}
func (UnimplementedPlayerManagerServiceServer) GetPlayerFriends(context.Context, *GetPlayerFriendsRequest) (*GetPlayerFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerFriends not implemented")
}
func (UnimplementedPlayerManagerServiceServer) AddFriend(context.Context, *AddFriendRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedPlayerManagerServiceServer) mustEmbedUnimplementedPlayerManagerServiceServer() {}

// UnsafePlayerManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerManagerServiceServer will
// result in compilation errors.
type UnsafePlayerManagerServiceServer interface {
	mustEmbedUnimplementedPlayerManagerServiceServer()
}

func RegisterPlayerManagerServiceServer(s grpc.ServiceRegistrar, srv PlayerManagerServiceServer) {
	s.RegisterService(&PlayerManagerService_ServiceDesc, srv)
}

func _PlayerManagerService_GetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerManagerServiceServer).GetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlayerManagerService/GetPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerManagerServiceServer).GetPlayer(ctx, req.(*GetPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerManagerService_UpdatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerManagerServiceServer).UpdatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlayerManagerService/UpdatePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerManagerServiceServer).UpdatePlayer(ctx, req.(*UpdatePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerManagerService_GetPlayerFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerManagerServiceServer).GetPlayerFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlayerManagerService/GetPlayerFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerManagerServiceServer).GetPlayerFriends(ctx, req.(*GetPlayerFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerManagerService_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerManagerServiceServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlayerManagerService/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerManagerServiceServer).AddFriend(ctx, req.(*AddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerManagerService_ServiceDesc is the grpc.ServiceDesc for PlayerManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PlayerManagerService",
	HandlerType: (*PlayerManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayer",
			Handler:    _PlayerManagerService_GetPlayer_Handler,
		},
		{
			MethodName: "UpdatePlayer",
			Handler:    _PlayerManagerService_UpdatePlayer_Handler,
		},
		{
			MethodName: "GetPlayerFriends",
			Handler:    _PlayerManagerService_GetPlayerFriends_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _PlayerManagerService_AddFriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playermanager.proto",
}
